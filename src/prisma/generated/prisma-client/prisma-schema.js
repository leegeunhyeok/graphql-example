module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type Aggregatetodo {
  count: Int!
}

type Aggregateuser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createtodo(data: todoCreateInput!): todo!
  updatetodo(data: todoUpdateInput!, where: todoWhereUniqueInput!): todo
  updateManytodoes(data: todoUpdateManyMutationInput!, where: todoWhereInput): BatchPayload!
  upserttodo(where: todoWhereUniqueInput!, create: todoCreateInput!, update: todoUpdateInput!): todo!
  deletetodo(where: todoWhereUniqueInput!): todo
  deleteManytodoes(where: todoWhereInput): BatchPayload!
  createuser(data: userCreateInput!): user!
  updateuser(data: userUpdateInput!, where: userWhereUniqueInput!): user
  updateManyusers(data: userUpdateManyMutationInput!, where: userWhereInput): BatchPayload!
  upsertuser(where: userWhereUniqueInput!, create: userCreateInput!, update: userUpdateInput!): user!
  deleteuser(where: userWhereUniqueInput!): user
  deleteManyusers(where: userWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  todo(where: todoWhereUniqueInput!): todo
  todoes(where: todoWhereInput, orderBy: todoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [todo]!
  todoesConnection(where: todoWhereInput, orderBy: todoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): todoConnection!
  user(where: userWhereUniqueInput!): user
  users(where: userWhereInput, orderBy: userOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [user]!
  usersConnection(where: userWhereInput, orderBy: userOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): userConnection!
  node(id: ID!): Node
}

type Subscription {
  todo(where: todoSubscriptionWhereInput): todoSubscriptionPayload
  user(where: userSubscriptionWhereInput): userSubscriptionPayload
}

type todo {
  id: ID!
  content: String!
  author: user!
}

type todoConnection {
  pageInfo: PageInfo!
  edges: [todoEdge]!
  aggregate: Aggregatetodo!
}

input todoCreateInput {
  id: ID
  content: String!
  author: userCreateOneWithoutTodosInput!
}

input todoCreateManyWithoutAuthorInput {
  create: [todoCreateWithoutAuthorInput!]
  connect: [todoWhereUniqueInput!]
}

input todoCreateWithoutAuthorInput {
  id: ID
  content: String!
}

type todoEdge {
  node: todo!
  cursor: String!
}

enum todoOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
}

type todoPreviousValues {
  id: ID!
  content: String!
}

input todoScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [todoScalarWhereInput!]
  OR: [todoScalarWhereInput!]
  NOT: [todoScalarWhereInput!]
}

type todoSubscriptionPayload {
  mutation: MutationType!
  node: todo
  updatedFields: [String!]
  previousValues: todoPreviousValues
}

input todoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: todoWhereInput
  AND: [todoSubscriptionWhereInput!]
}

input todoUpdateInput {
  content: String
  author: userUpdateOneRequiredWithoutTodosInput
}

input todoUpdateManyDataInput {
  content: String
}

input todoUpdateManyMutationInput {
  content: String
}

input todoUpdateManyWithoutAuthorInput {
  create: [todoCreateWithoutAuthorInput!]
  delete: [todoWhereUniqueInput!]
  connect: [todoWhereUniqueInput!]
  set: [todoWhereUniqueInput!]
  disconnect: [todoWhereUniqueInput!]
  update: [todoUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [todoUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [todoScalarWhereInput!]
  updateMany: [todoUpdateManyWithWhereNestedInput!]
}

input todoUpdateManyWithWhereNestedInput {
  where: todoScalarWhereInput!
  data: todoUpdateManyDataInput!
}

input todoUpdateWithoutAuthorDataInput {
  content: String
}

input todoUpdateWithWhereUniqueWithoutAuthorInput {
  where: todoWhereUniqueInput!
  data: todoUpdateWithoutAuthorDataInput!
}

input todoUpsertWithWhereUniqueWithoutAuthorInput {
  where: todoWhereUniqueInput!
  update: todoUpdateWithoutAuthorDataInput!
  create: todoCreateWithoutAuthorInput!
}

input todoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  author: userWhereInput
  AND: [todoWhereInput!]
}

input todoWhereUniqueInput {
  id: ID
}

type user {
  id: ID!
  username: String!
  password: String!
  name: String
  email: String
  todos(where: todoWhereInput, orderBy: todoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [todo!]
}

type userConnection {
  pageInfo: PageInfo!
  edges: [userEdge]!
  aggregate: Aggregateuser!
}

input userCreateInput {
  id: ID
  username: String!
  password: String!
  name: String
  email: String
  todos: todoCreateManyWithoutAuthorInput
}

input userCreateOneWithoutTodosInput {
  create: userCreateWithoutTodosInput
  connect: userWhereUniqueInput
}

input userCreateWithoutTodosInput {
  id: ID
  username: String!
  password: String!
  name: String
  email: String
}

type userEdge {
  node: user!
  cursor: String!
}

enum userOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
}

type userPreviousValues {
  id: ID!
  username: String!
  password: String!
  name: String
  email: String
}

type userSubscriptionPayload {
  mutation: MutationType!
  node: user
  updatedFields: [String!]
  previousValues: userPreviousValues
}

input userSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: userWhereInput
  AND: [userSubscriptionWhereInput!]
}

input userUpdateInput {
  username: String
  password: String
  name: String
  email: String
  todos: todoUpdateManyWithoutAuthorInput
}

input userUpdateManyMutationInput {
  username: String
  password: String
  name: String
  email: String
}

input userUpdateOneRequiredWithoutTodosInput {
  create: userCreateWithoutTodosInput
  update: userUpdateWithoutTodosDataInput
  upsert: userUpsertWithoutTodosInput
  connect: userWhereUniqueInput
}

input userUpdateWithoutTodosDataInput {
  username: String
  password: String
  name: String
  email: String
}

input userUpsertWithoutTodosInput {
  update: userUpdateWithoutTodosDataInput!
  create: userCreateWithoutTodosInput!
}

input userWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  todos_some: todoWhereInput
  AND: [userWhereInput!]
}

input userWhereUniqueInput {
  id: ID
  username: String
}
`
      }
    