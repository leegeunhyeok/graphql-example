// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  todo: (where?: todoWhereInput) => Promise<boolean>;
  user: (where?: userWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  todo: (where: todoWhereUniqueInput) => todoNullablePromise;
  todoes: (args?: {
    where?: todoWhereInput;
    orderBy?: todoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<todo>;
  todoesConnection: (args?: {
    where?: todoWhereInput;
    orderBy?: todoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => todoConnectionPromise;
  user: (where: userWhereUniqueInput) => userNullablePromise;
  users: (args?: {
    where?: userWhereInput;
    orderBy?: userOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<user>;
  usersConnection: (args?: {
    where?: userWhereInput;
    orderBy?: userOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => userConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createtodo: (data: todoCreateInput) => todoPromise;
  updatetodo: (args: {
    data: todoUpdateInput;
    where: todoWhereUniqueInput;
  }) => todoPromise;
  updateManytodoes: (args: {
    data: todoUpdateManyMutationInput;
    where?: todoWhereInput;
  }) => BatchPayloadPromise;
  upserttodo: (args: {
    where: todoWhereUniqueInput;
    create: todoCreateInput;
    update: todoUpdateInput;
  }) => todoPromise;
  deletetodo: (where: todoWhereUniqueInput) => todoPromise;
  deleteManytodoes: (where?: todoWhereInput) => BatchPayloadPromise;
  createuser: (data: userCreateInput) => userPromise;
  updateuser: (args: {
    data: userUpdateInput;
    where: userWhereUniqueInput;
  }) => userPromise;
  updateManyusers: (args: {
    data: userUpdateManyMutationInput;
    where?: userWhereInput;
  }) => BatchPayloadPromise;
  upsertuser: (args: {
    where: userWhereUniqueInput;
    create: userCreateInput;
    update: userUpdateInput;
  }) => userPromise;
  deleteuser: (where: userWhereUniqueInput) => userPromise;
  deleteManyusers: (where?: userWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  todo: (
    where?: todoSubscriptionWhereInput
  ) => todoSubscriptionPayloadSubscription;
  user: (
    where?: userSubscriptionWhereInput
  ) => userSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type todoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC";

export type userOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "username_ASC"
  | "username_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface userUpdateOneRequiredWithoutTodosInput {
  create?: Maybe<userCreateWithoutTodosInput>;
  update?: Maybe<userUpdateWithoutTodosDataInput>;
  upsert?: Maybe<userUpsertWithoutTodosInput>;
  connect?: Maybe<userWhereUniqueInput>;
}

export type todoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface todoUpdateManyMutationInput {
  content?: Maybe<String>;
}

export interface todoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  author?: Maybe<userWhereInput>;
  AND?: Maybe<todoWhereInput[] | todoWhereInput>;
}

export interface todoCreateInput {
  id?: Maybe<ID_Input>;
  content: String;
  author: userCreateOneWithoutTodosInput;
}

export interface todoCreateManyWithoutAuthorInput {
  create?: Maybe<todoCreateWithoutAuthorInput[] | todoCreateWithoutAuthorInput>;
  connect?: Maybe<todoWhereUniqueInput[] | todoWhereUniqueInput>;
}

export interface userCreateOneWithoutTodosInput {
  create?: Maybe<userCreateWithoutTodosInput>;
  connect?: Maybe<userWhereUniqueInput>;
}

export interface todoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<todoWhereInput>;
  AND?: Maybe<todoSubscriptionWhereInput[] | todoSubscriptionWhereInput>;
}

export interface userCreateWithoutTodosInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface todoUpdateManyDataInput {
  content?: Maybe<String>;
}

export interface todoUpdateInput {
  content?: Maybe<String>;
  author?: Maybe<userUpdateOneRequiredWithoutTodosInput>;
}

export type userWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
}>;

export interface todoUpdateManyWithoutAuthorInput {
  create?: Maybe<todoCreateWithoutAuthorInput[] | todoCreateWithoutAuthorInput>;
  delete?: Maybe<todoWhereUniqueInput[] | todoWhereUniqueInput>;
  connect?: Maybe<todoWhereUniqueInput[] | todoWhereUniqueInput>;
  set?: Maybe<todoWhereUniqueInput[] | todoWhereUniqueInput>;
  disconnect?: Maybe<todoWhereUniqueInput[] | todoWhereUniqueInput>;
  update?: Maybe<
    | todoUpdateWithWhereUniqueWithoutAuthorInput[]
    | todoUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | todoUpsertWithWhereUniqueWithoutAuthorInput[]
    | todoUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<todoScalarWhereInput[] | todoScalarWhereInput>;
  updateMany?: Maybe<
    todoUpdateManyWithWhereNestedInput[] | todoUpdateManyWithWhereNestedInput
  >;
}

export interface todoUpsertWithWhereUniqueWithoutAuthorInput {
  where: todoWhereUniqueInput;
  update: todoUpdateWithoutAuthorDataInput;
  create: todoCreateWithoutAuthorInput;
}

export interface userUpdateWithoutTodosDataInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface todoUpdateWithWhereUniqueWithoutAuthorInput {
  where: todoWhereUniqueInput;
  data: todoUpdateWithoutAuthorDataInput;
}

export interface userUpsertWithoutTodosInput {
  update: userUpdateWithoutTodosDataInput;
  create: userCreateWithoutTodosInput;
}

export interface userSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<userWhereInput>;
  AND?: Maybe<userSubscriptionWhereInput[] | userSubscriptionWhereInput>;
}

export interface userCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  password: String;
  name?: Maybe<String>;
  email?: Maybe<String>;
  todos?: Maybe<todoCreateManyWithoutAuthorInput>;
}

export interface todoCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  content: String;
}

export interface userUpdateInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  todos?: Maybe<todoUpdateManyWithoutAuthorInput>;
}

export interface userWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  todos_some?: Maybe<todoWhereInput>;
  AND?: Maybe<userWhereInput[] | userWhereInput>;
}

export interface userUpdateManyMutationInput {
  username?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  email?: Maybe<String>;
}

export interface todoUpdateWithoutAuthorDataInput {
  content?: Maybe<String>;
}

export interface todoScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  AND?: Maybe<todoScalarWhereInput[] | todoScalarWhereInput>;
  OR?: Maybe<todoScalarWhereInput[] | todoScalarWhereInput>;
  NOT?: Maybe<todoScalarWhereInput[] | todoScalarWhereInput>;
}

export interface todoUpdateManyWithWhereNestedInput {
  where: todoScalarWhereInput;
  data: todoUpdateManyDataInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface userPreviousValues {
  id: ID_Output;
  username: String;
  password: String;
  name?: String;
  email?: String;
}

export interface userPreviousValuesPromise
  extends Promise<userPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
}

export interface userPreviousValuesSubscription
  extends Promise<AsyncIterator<userPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface todoEdge {
  node: todo;
  cursor: String;
}

export interface todoEdgePromise extends Promise<todoEdge>, Fragmentable {
  node: <T = todoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface todoEdgeSubscription
  extends Promise<AsyncIterator<todoEdge>>,
    Fragmentable {
  node: <T = todoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface user {
  id: ID_Output;
  username: String;
  password: String;
  name?: String;
  email?: String;
}

export interface userPromise extends Promise<user>, Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  todos: <T = FragmentableArray<todo>>(args?: {
    where?: todoWhereInput;
    orderBy?: todoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface userSubscription
  extends Promise<AsyncIterator<user>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  username: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  todos: <T = Promise<AsyncIterator<todoSubscription>>>(args?: {
    where?: todoWhereInput;
    orderBy?: todoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface userNullablePromise
  extends Promise<user | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  username: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  todos: <T = FragmentableArray<todo>>(args?: {
    where?: todoWhereInput;
    orderBy?: todoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface todoConnection {
  pageInfo: PageInfo;
  edges: todoEdge[];
}

export interface todoConnectionPromise
  extends Promise<todoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<todoEdge>>() => T;
  aggregate: <T = AggregatetodoPromise>() => T;
}

export interface todoConnectionSubscription
  extends Promise<AsyncIterator<todoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<todoEdgeSubscription>>>() => T;
  aggregate: <T = AggregatetodoSubscription>() => T;
}

export interface todoPreviousValues {
  id: ID_Output;
  content: String;
}

export interface todoPreviousValuesPromise
  extends Promise<todoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
}

export interface todoPreviousValuesSubscription
  extends Promise<AsyncIterator<todoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface todoSubscriptionPayload {
  mutation: MutationType;
  node: todo;
  updatedFields: String[];
  previousValues: todoPreviousValues;
}

export interface todoSubscriptionPayloadPromise
  extends Promise<todoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = todoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = todoPreviousValuesPromise>() => T;
}

export interface todoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<todoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = todoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = todoPreviousValuesSubscription>() => T;
}

export interface todo {
  id: ID_Output;
  content: String;
}

export interface todoPromise extends Promise<todo>, Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  author: <T = userPromise>() => T;
}

export interface todoSubscription
  extends Promise<AsyncIterator<todo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  author: <T = userSubscription>() => T;
}

export interface todoNullablePromise
  extends Promise<todo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  author: <T = userPromise>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface Aggregateuser {
  count: Int;
}

export interface AggregateuserPromise
  extends Promise<Aggregateuser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateuserSubscription
  extends Promise<AsyncIterator<Aggregateuser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface userEdge {
  node: user;
  cursor: String;
}

export interface userEdgePromise extends Promise<userEdge>, Fragmentable {
  node: <T = userPromise>() => T;
  cursor: () => Promise<String>;
}

export interface userEdgeSubscription
  extends Promise<AsyncIterator<userEdge>>,
    Fragmentable {
  node: <T = userSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Aggregatetodo {
  count: Int;
}

export interface AggregatetodoPromise
  extends Promise<Aggregatetodo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatetodoSubscription
  extends Promise<AsyncIterator<Aggregatetodo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface userSubscriptionPayload {
  mutation: MutationType;
  node: user;
  updatedFields: String[];
  previousValues: userPreviousValues;
}

export interface userSubscriptionPayloadPromise
  extends Promise<userSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = userPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = userPreviousValuesPromise>() => T;
}

export interface userSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<userSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = userSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = userPreviousValuesSubscription>() => T;
}

export interface userConnection {
  pageInfo: PageInfo;
  edges: userEdge[];
}

export interface userConnectionPromise
  extends Promise<userConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<userEdge>>() => T;
  aggregate: <T = AggregateuserPromise>() => T;
}

export interface userConnectionSubscription
  extends Promise<AsyncIterator<userConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<userEdgeSubscription>>>() => T;
  aggregate: <T = AggregateuserSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "todo",
    embedded: false
  },
  {
    name: "user",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
